/**
 * DroolTool.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { catchError } from 'rxjs/operators';
import { ApiService } from '../../services';


@Injectable({
  providedIn: 'root'
})
export class FeedbackService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration
    , private apiService: ApiService) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param feedbackID 
     * @param feedbackDate 
     * @param feedbackContent 
     * @param feedbackName 
     * @param feedbackEmail 
     * @param feedbackPhoneNumber 
     * @param token 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public feedbackProvideFeedbackPost(feedbackID?: number, feedbackDate?: string, feedbackContent?: string, feedbackName?: string, feedbackEmail?: string, feedbackPhoneNumber?: string, token?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public feedbackProvideFeedbackPost(feedbackID?: number, feedbackDate?: string, feedbackContent?: string, feedbackName?: string, feedbackEmail?: string, feedbackPhoneNumber?: string, token?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public feedbackProvideFeedbackPost(feedbackID?: number, feedbackDate?: string, feedbackContent?: string, feedbackName?: string, feedbackEmail?: string, feedbackPhoneNumber?: string, token?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public feedbackProvideFeedbackPost(feedbackID?: number, feedbackDate?: string, feedbackContent?: string, feedbackName?: string, feedbackEmail?: string, feedbackPhoneNumber?: string, token?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {








        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data',
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void | HttpParams; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (feedbackID !== undefined) {
            formParams = formParams.append('FeedbackID', <any>feedbackID) || formParams;
        }
        if (feedbackDate !== undefined) {
            formParams = formParams.append('FeedbackDate', <any>feedbackDate) || formParams;
        }
        if (feedbackContent !== undefined) {
            formParams = formParams.append('FeedbackContent', <any>feedbackContent) || formParams;
        }
        if (feedbackName !== undefined) {
            formParams = formParams.append('FeedbackName', <any>feedbackName) || formParams;
        }
        if (feedbackEmail !== undefined) {
            formParams = formParams.append('FeedbackEmail', <any>feedbackEmail) || formParams;
        }
        if (feedbackPhoneNumber !== undefined) {
            formParams = formParams.append('FeedbackPhoneNumber', <any>feedbackPhoneNumber) || formParams;
        }
        if (token !== undefined) {
            formParams = formParams.append('token', <any>token) || formParams;
        }

        return this.httpClient.post<any>(`${this.basePath}/feedback/provide-feedback`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

}
